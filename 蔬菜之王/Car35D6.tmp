[gd_scene load_steps=7 format=3 uid="uid://bebhkuctbmqly"]

[ext_resource type="Texture2D" uid="uid://0p2shx8ovywy" path="res://CardRes/card_empty.png" id="1_7omnl"]
[ext_resource type="Script" path="res://Card.gd" id="1_8dn3b"]
[ext_resource type="Texture2D" uid="uid://bj28kh3cjks3d" path="res://CardRes/Icons/chess_bishop.svg" id="2_esi73"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_l6qd2"]
size = Vector2(41, 58)

[sub_resource type="Shader" id="Shader_loenb"]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false
uniform vec2 number_of_images = vec2(1.0); // number of horizontal and vertical images in the sprite sheet

void vertex() {
	if (add_margins) {
		VERTEX += sign(VERTEX) * width; // replace `sign(VERTEX)` by `sign(VERTEX * 2.0 - 1.0)` if not centered
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, vec2 image_top_left, vec2 image_bottom_right, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;

		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}

		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);

			if ((xy != clamp(xy, image_top_left, image_bottom_right) || texture(texture, xy).a <= 0.0) == inside) {
				return true;
			}
		}
	}

	return false;
}

void fragment() {
	vec2 uv = UV;
	vec2 image_top_left = floor(uv * number_of_images) / number_of_images;
	vec2 image_bottom_right = image_top_left + vec2(1.0) / number_of_images;

	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0) * number_of_images);

		uv = (uv - texture_pixel_size * width - image_top_left) * TEXTURE_PIXEL_SIZE / texture_pixel_size + image_top_left;

		if (uv != clamp(uv, image_top_left, image_bottom_right)) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}

	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, image_top_left, image_bottom_right, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mhu25"]
shader = SubResource("Shader_loenb")

[node name="Card" type="Area2D"]
script = ExtResource("1_8dn3b")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0.5, 0)
shape = SubResource("RectangleShape2D_l6qd2")

[node name="Card_back" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_mhu25")
scale = Vector2(1.03125, 1.01563)
texture = ExtResource("1_7omnl")

[node name="Sprite2D" type="Sprite2D" parent="Card_back"]
self_modulate = Color(1, 0.352941, 1, 1)
position = Vector2(0, 10.8308)
scale = Vector2(0.4, 0.4)
texture = ExtResource("2_esi73")
metadata/_edit_lock_ = true

[node name="Label" type="Label" parent="Card_back"]
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -52.0
offset_top = -32.0
offset_right = -12.0
offset_bottom = -9.0
grow_horizontal = 2
theme_override_colors/font_color = Color(0, 0, 0, 1)
text = "6"
horizontal_alignment = 1
vertical_alignment = 1
metadata/_edit_lock_ = true
